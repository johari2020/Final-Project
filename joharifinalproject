"""
joharifinalproject.py
Author: Johari 
Credit: Meggie, Noah 
"""

from ggame import App, Color, LineStyle, Sprite, RectangleAsset, CircleAsset, EllipseAsset, PolygonAsset, ImageAsset, Frame
myapp = App()

from math import floor

SCREEN_WIDTH = 1000
SCREEN_HEIGHT = 800

blue = Color(0x2EFEC8, 1.0)
black = Color(0x000000, 1.0)
pink = Color(0x9b8ece, 1.0)
red = Color(0xFF5733, 1.0)
white = Color(0xFFFFFF, 1.0)
green = Color(0x77d4ad, 1.0)
blue = Color(0xc6ffe7, 1.0)
black = Color(0x000000, 1.0)
white = Color(0xffffff, 1.0)
grey = Color(0x5ca586, 1.0) 
purple = Color(0xc8beff, 1.0)

thinline = LineStyle(2, grey)
blkline = LineStyle(1, black)
noline = LineStyle(0, white)
coolline = LineStyle(1, grey)
blueline = LineStyle(2, blue)
redline = LineStyle(1, red)
greenline = LineStyle(1, green)
gridline = LineStyle(1, grey)

class Paddle(Sprite):
    
    asset = RectangleAsset(15, 70, thinline, blue)
    def __init__(self, position):
        self.vx = 0 
        self.vy = 0
        super().__init__(Paddle.asset, position)
        
class Ball(Sprite): 
    
    asset = CircleAsset(15, noline, black)
    def __init__(self, position):
        self.vx = 0 
        self.vy = 0
        super().__init__(Ball.asset, position)
        
class TopBarrier(Sprite): 
    
    asset = RectangleAsset(1000, 4, noline, black)
    def __init__(self, position):
        
        super().__init__(TopBarrier.asset, position)
        
class BottomBarrier(Sprite): 
    
    asset = RectangleAsset(1000, 4, noline, black)
    def __init__(self, position):
        super().__init__(BottomBarrier.asset, position)
        
class Top(Sprite): 
    
    asset = RectangleAsset(15, 5, noline, green)
    def __init__(self, position):
        self.vx = 0 
        self.vy = 0
        super().__init__(Top.asset, position)


class One(Sprite): 
    
    asset = RectangleAsset(3, 23, noline, black)
    def __init__(self, position):
        self.vx = 0 
        self.vy = 0
        super().__init__(One.asset, position)

class Two(Sprite): 
    
    asset = RectangleAsset(3, 23, noline, white)
    def __init__(self, position):
        self.vx = 0 
        self.vy = 0
        super().__init__(Two.asset, position)
        
class Three(Sprite): 

    asset = RectangleAsset(3, 23, noline, black)
    def __init__(self, position):
        self.vx = 0 
        self.vy = 0
        super().__init__(Three.asset, position)
        

class FinalProject(App):
    
    def __init__(self):
        super().__init__()
        bg_asset = RectangleAsset(1000, 800, noline, pink)
        bg = Sprite(bg_asset, (0,0))
        self.asset = [0,0] 
        
        Paddle((950,220))
        TopBarrier((0,0))
        BottomBarrier((0,478))
        Top((952,220))
        One((952,220))
        Two((952,243))
        Three((952,269))
        
        FinalProject.listenMouseEvent('mousemove', self.mouse) 
        FinalProject.listenKeyEvent('keydown', 'b', self.ball)
        
        FinalProject.listenKeyEvent('keydown', 'up arrow', self.uvelocity)
        FinalProject.listenKeyEvent('keyup', 'up arrow', self.uvelocity2)
        FinalProject.listenKeyEvent('keydown', 'down arrow', self.dvelocity)
        FinalProject.listenKeyEvent('keyup', 'down arrow', self.dvelocity2)
        
        FinalProject.listenKeyEvent('keydown', 'up arrow', self.tuvelocity)
        FinalProject.listenKeyEvent('keyup', 'up arrow', self.tuvelocity2)
        FinalProject.listenKeyEvent('keydown', 'down arrow', self.tdvelocity)
        FinalProject.listenKeyEvent('keyup', 'down arrow', self.tdvelocity2)
        
        FinalProject.listenKeyEvent('keydown', 'up arrow', self.ouvelocity)
        FinalProject.listenKeyEvent('keyup', 'up arrow', self.ouvelocity2)
        FinalProject.listenKeyEvent('keydown', 'down arrow', self.odvelocity)
        FinalProject.listenKeyEvent('keyup', 'down arrow', self.odvelocity2)
        
        FinalProject.listenKeyEvent('keydown', 'up arrow', self.twuvelocity)
        FinalProject.listenKeyEvent('keyup', 'up arrow', self.twuvelocity2)
        FinalProject.listenKeyEvent('keydown', 'down arrow', self.twdvelocity)
        FinalProject.listenKeyEvent('keyup', 'down arrow', self.twdvelocity2)
        
        FinalProject.listenKeyEvent('keydown', 'up arrow', self.thuvelocity)
        FinalProject.listenKeyEvent('keyup', 'up arrow', self.thuvelocity2)
        FinalProject.listenKeyEvent('keydown', 'down arrow', self.thdvelocity)
        FinalProject.listenKeyEvent('keyup', 'down arrow', self.thdvelocity2)
    
    def step(self):
        for paddle in self.getSpritesbyClass(Paddle):
            for top in self.getSpritesbyClass(Top):
                for one in self.getSpritesbyClass(One):
                    for two in self.getSpritesbyClass(Two):
                        for three in self.getSpritesbyClass(Three):
                            for bottombarrier in self.getSpritesbyClass(BottomBarrier):
                                m=0
                                if bottombarrier.collidingWith(paddle): 
                                    m+=1
                            for topbarrier in self.getSpritesbyClass(TopBarrier):
                                n=0
                                if topbarrier.collidingWith(top): 
                                    n+=1    
                        if m>0 and paddle.vy>=0: 
                                paddle.vy= -paddle.vy
                                top.vy=-top.vy
                            
                        if n>0 and paddle.vy!=0: 
                                paddle.vy= -paddle.vy
                                top.vy=-top.vy
                        else: 
                            paddle.vy=paddle.vy
                            top.vy=top.vy
                            
                        paddle.y += paddle.vy
                        top.y += top.vy
                        
                        one.y += one.vy
                        two.y += two.vy
                        three.y += three.vy
            

    
        
#up velocity of paddle    
    def uvelocity(self, event): 
            for paddle in self.getSpritesbyClass(Paddle):
                paddle.vy = -5
    def uvelocity2(self, event): 
            for paddle in self.getSpritesbyClass(Paddle):
                paddle.vy = 0
    
#down velocity of paddle
    def dvelocity(self, event): 
            for paddle in self.getSpritesbyClass(Paddle):
                paddle.vy = 5
    def dvelocity2(self, event): 
            for paddle in self.getSpritesbyClass(Paddle):
                paddle.vy = 0
    
#top velocity 
    def tdvelocity(self, event): 
            for top in self.getSpritesbyClass(Top):
                top.vy = 5
    def tdvelocity2(self, event): 
            for top in self.getSpritesbyClass(Top):
                top.vy = 0
    def tuvelocity(self, event): 
            for top in self.getSpritesbyClass(Top):
                top.vy = -5
    def tuvelocity2(self, event): 
            for top in self.getSpritesbyClass(Top):
                top.vy = 0
# one velocity        
    def odvelocity(self, event): 
            for one in self.getSpritesbyClass(One):
                one.vy = 5
            
    def odvelocity2(self, event): 
            for one in self.getSpritesbyClass(One):
                one.vy = 0
            
    
    def ouvelocity(self, event): 
            for one in self.getSpritesbyClass(One):
                one.vy = -5
            
            
    def ouvelocity2(self, event): 
            for one in self.getSpritesbyClass(One):
                one.vy = 0 
#two velocity
    def twdvelocity(self, event): 
            for two in self.getSpritesbyClass(Two):
                two.vy = 5
            
    def twdvelocity2(self, event): 
            for two in self.getSpritesbyClass(Two):
                two.vy = 0
            
    
    def twuvelocity(self, event): 
            for two in self.getSpritesbyClass(Two):
                two.vy = -5
            
            
    def twuvelocity2(self, event): 
            for two in self.getSpritesbyClass(Two):
                two.vy = 0
#three velocity
    def thdvelocity(self, event): 
        for three in self.getSpritesbyClass(Three):
            three.vy = 5
            
    def thdvelocity2(self, event): 
            for three in self.getSpritesbyClass(Three):
                three.vy = 0
            
    
    def thuvelocity(self, event): 
            for three in self.getSpritesbyClass(Three):
                three.vy = -5
            
            
    def thuvelocity2(self, event): 
            for three in self.getSpritesbyClass(Three):
                three.vy = 0
    def mouse(self, event):
            self.asset[0]= event.x
            self.asset[1] = event.y
            
    def ball(self, event):
        Ball((self.asset[0], self.asset[1]))
    
        
            
myapp = FinalProject()
myapp.run()
